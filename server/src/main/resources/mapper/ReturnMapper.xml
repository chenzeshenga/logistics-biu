<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.abc.chenzeshenga.logistics.mapper.ReturnMapper">
    <cache eviction="FIFO" flushInterval="600000" size="512"/>

    <resultMap id="result" type="com.abc.chenzeshenga.logistics.model.Return">
        <id column="return_no" property="returnNo"/>
        <result column="without_order_no_flag" property="withoutOrderNoFlag"/>
        <result column="order_no" property="orderNo"/>
        <result column="to_name" property="toName"/>
        <result column="to_contact" property="toContact"/>
        <result column="to_zip_code" property="toZipCode"/>
        <result column="from_name" property="fromName"/>
        <result column="from_contact" property="fromContact"/>
        <result column="from_zip_code" property="fromZipCode"/>
        <result column="carrier" property="carrier"/>
        <result column="track_no" property="trackNo"/>
        <result column="imgs" property="imgs"/>
        <result column="status" property="status"/>
        <result column="create_by" property="creator"/>
        <result column="create_on" jdbcType="TIMESTAMP" property="createOn"/>
        <result column="update_by" property="updator"/>
        <result column="update_on" jdbcType="TIMESTAMP" property="updateOn"/>
        <result column="to_address_line1" property="toAddressLine1"/>
        <result column="to_address_line2" property="toAddressLine2"/>
        <result column="to_address_line3" property="toAddressLine3"/>
        <result column="from_address_line1" property="fromAddressLine1"/>
        <result column="from_address_line2" property="fromAddressLine2"/>
        <result column="from_address_line3" property="fromAddressLine3"/>
        <collection property="contentList" fetchType="lazy" column="return_no"
                    select="selectContentById"
                    ofType="com.abc.chenzeshenga.logistics.model.ReturnContent">
            <id column="uuid" property="uuid"/>
            <result column="return_no" property="returnNo"/>
            <result column="sku" property="sku"/>
            <result column="box_seq" property="name"/>
            <result column="total_num" property="num"/>
            <result column="deal_with" property="dealWith"/>
        </collection>
    </resultMap>

    <select id="getReturnSeq" resultMap="result">
        select *
        from l_returning
        order by create_on desc
        limit 1
    </select>

    <select id="selectByPk" resultMap="result">
        select return_no,
               without_order_no_flag,
               to_name,
               to_contact,
               to_zip_code,
               to_detail_address,
               to_ken_id,
               to_city_id,
               to_town_id,
               from_name,
               from_contact,
               from_zip_code,
               from_detail_address,
               from_ken_id,
               from_city_id,
               from_town_id,
               carrier,
               track_no,
               imgs,
               status,
               create_on,
               update_on,
               create_by,
               update_by,
               order_no,
               length,
               width,
               height,
               weight,
               from_address_line1,
               from_address_line2,
               from_address_line3,
               to_address_line1,
               to_address_line2,
               to_address_line3
        from l_returning
        where return_no = #{returnNo}
    </select>

    <update id="updateByPk" parameterType="com.abc.chenzeshenga.logistics.model.Return">
        update l_returning
        set without_order_no_flag = #{withoutOrderNoFlag},
            order_no              = #{orderNo},
            to_name               = #{toName},
            to_contact            = #{toContact},
            to_zip_code           = #{toZipCode},
            to_detail_address     = #{toDetailAddress},
            to_ken_id             = #{toKenId},
            to_city_id            = #{toCityId},
            to_town_id            = #{toTownId},
            from_name             = #{fromName},
            from_contact          = #{fromContact},
            from_zip_code         = #{fromZipCode},
            from_detail_address   = #{fromDetailAddress},
            from_ken_id           = #{fromKenId},
            from_city_id          = #{fromCityId},
            from_town_id          = #{fromTownId},
            carrier               = #{carrier},
            track_no              = #{trackNo},
            imgs                  = #{imgs},
            status                = #{status},
            create_by             = #{creator},
            update_by             = #{updator},
            create_on             = #{createOn,jdbcType=TIMESTAMP},
            update_on             = #{updateOn,jdbcType=TIMESTAMP},
            to_address_line1      =#{toAddressLine1},
            to_address_line2      =#{toAddressLine2},
            to_address_line3      =#{toAddressLine3},
            from_address_line1    =#{fromAddressLine1},
            from_address_line2    =#{fromAddressLine2},
            from_address_line3    =#{fromAddressLine3}
        where return_no = #{returnNo}
    </update>

    <insert id="insertReturnOrder" parameterType="com.abc.chenzeshenga.logistics.model.Return">
        insert into l_returning (return_no, without_order_no_flag, to_name, to_contact, to_zip_code, to_detail_address,
                                 to_ken_id, to_city_id, to_town_id, from_name, from_contact, from_zip_code,
                                 from_detail_address, from_ken_id, from_city_id, from_town_id, carrier, track_no, imgs,
                                 status, create_on, update_on, create_by, update_by, order_no, from_address_line1,
                                 from_address_line2, from_address_line3, to_address_line1,
                                 to_address_line2, to_address_line3)
        values (#{returnNo}, #{withoutOrderNoFlag}, #{toName}, #{toContact}, #{toZipCode}, #{toDetailAddress},
                #{toKenId}, #{toCityId}, #{toTownId}, #{fromName}, #{fromContact}, #{fromZipCode},
                #{fromDetailAddress}, #{fromKenId}, #{fromCityId}, #{fromTownId}, #{carrier}, #{trackNo}, #{imgs},
                #{status}, #{createOn,jdbcType=TIMESTAMP}, #{updateOn,jdbcType=TIMESTAMP}, #{creator}, #{updator},
                #{orderNo}, #{fromAddressLine1}, #{fromAddressLine2}, #{fromAddressLine3}, #{toAddressLine1},
                #{toAddressLine2}, #{toAddressLine3})
        on duplicate key update without_order_no_flag=#{withoutOrderNoFlag},
                                to_name= #{toName},
                                to_contact=#{toContact},
                                to_zip_code=#{toZipCode},
                                to_detail_address= #{toDetailAddress},
                                to_ken_id=#{toKenId},
                                to_city_id=#{toCityId},
                                to_town_id=#{toTownId},
                                from_name=#{fromName},
                                from_contact= #{fromContact},
                                from_zip_code=#{fromZipCode},
                                from_detail_address=#{fromDetailAddress},
                                from_ken_id=#{fromKenId},
                                from_city_id=#{fromCityId},
                                from_town_id=#{fromTownId},
                                carrier= #{carrier},
                                track_no=#{trackNo},
                                imgs= #{imgs},
                                status= #{status},
                                create_on=#{createOn,jdbcType=TIMESTAMP},
                                update_on=#{updateOn,jdbcType=TIMESTAMP},
                                create_by= #{creator},
                                update_by= #{updator},
                                order_no= #{orderNo},
                                to_address_line1=#{toAddressLine1},
                                to_address_line2=#{toAddressLine2},
                                to_address_line3=#{toAddressLine3},
                                from_address_line1=#{fromAddressLine1},
                                from_address_line2=#{fromAddressLine2},
                                from_address_line3=#{fromAddressLine3}
    </insert>

    <insert id="insertContent" parameterType="java.util.List">
        insert into l_returning_content(uuid,return_no, sku, name, deal_with, num)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.uuid},#{item.returnNo}, #{item.sku}, #{item.name}, #{item.dealWith}, #{item.num})
        </foreach>
    </insert>

    <delete id="deleteContent" parameterType="java.lang.String">
        delete
        from l_returning_content
        where return_no = #{returnNo}
    </delete>

    <select id="list" resultMap="result">
        select returning.*, content.return_no as subReturnNo, content.sku, content.name, content.deal_with, content.num
        from l_returning returning
                 left join l_returning_content content on returning.return_no = content.return_no
        where status = #{status}
          and create_by = ''
          and create_on between #{from} and #{to}
    </select>

    <select id="listV2" resultMap="result">
        select return_no,
        without_order_no_flag,
        to_name,
        to_contact,
        to_zip_code,
        to_detail_address,
        to_ken_id,
        to_city_id,
        to_town_id,
        from_name,
        from_contact,
        from_zip_code,
        from_detail_address,
        from_ken_id,
        from_city_id,
        from_town_id,
        carrier,
        track_no,
        imgs,
        status,
        create_on,
        update_on,
        create_by,
        update_by,
        order_no,
        length,
        width,
        height,
        weight,
        from_address_line1,
        from_address_line2,
        from_address_line3,
        to_address_line1,
        to_address_line2,
        to_address_line3,
        return_no
        from l_returning
        where status = #{entity.status}
        <if test="entity.type == 'withoutUser'">
            and (create_by = '' or create_by is null)
        </if>
        <if test="entity.type == 'withUser'">
            and (create_by is not null and create_by != '')
        </if>
        <if test="entity.creator != null and entity.creator != ''">
            and create_by = #{entity.creator}
        </if>
        <if test="entity.returnNo != null and entity.returnNo != ''">
            and return_no = #{entity.returnNo}
        </if>
        <if test="entity.fromDate != null and entity.endDate != null">
            and create_on between #{entity.fromDate} and #{entity.endDate}
        </if>
        order by create_on desc
        limit #{limit.from},#{limit.size}
    </select>

    <select id="count" resultType="java.lang.Long">
        select count(1)
        from l_returning
        where status = #{entity.status}
        <if test="entity.type == 'withoutUser'">
            and (create_by = '' or create_by is null)
        </if>
        <if test="entity.type == 'withUser'">
            and (create_by is not null and create_by != '')
        </if>
        <if test="entity.creator != null and entity.creator != ''">
            and create_by = #{entity.creator}
        </if>
        <if test="entity.returnNo != null and entity.returnNo != ''">
            and return_no = #{entity.returnNo}
        </if>
        <if test="entity.fromDate != null and entity.endDate != null">
            and create_on between #{entity.fromDate} and #{entity.endDate}
        </if>
    </select>

    <update id="claimReturnNo">
        update l_returning
        set create_by=#{owner},
            update_on=now(),
            update_by=#{owner}
        where return_no = #{returnNo}
    </update>

    <update id="archiveReturnOrd">
        update l_returning
        set status='历史',
            update_on=now()
        where date_add(create_on, INTERVAL 14 DAY) > now()
          and (create_by is null or create_by = '')
    </update>

    <select id="listAll" resultMap="result">
        select returning.*, content.return_no as subReturnNo, content.sku, content.name, content.deal_with, content.num
        from l_returning returning
                 left join l_returning_content content on returning.return_no = content.return_no
        where status = #{status}
          and create_on between #{from} and #{to}
    </select>

    <select id="listAllV2" resultMap="result">
        select returning.*
        from l_returning returning
        where status = #{status}
          and create_on between #{from} and #{to}
    </select>

    <update id="updatePkgInfo" parameterType="com.abc.chenzeshenga.logistics.model.Return">
        update l_returning
        set length=#{length},
            width=#{width},
            height=#{height},
            status=#{status}
        where return_no = #{returnNo}
    </update>

    <select id="selectContentById" resultType="com.abc.chenzeshenga.logistics.model.ReturnContent">
        select return_no, sku, name, deal_with, num, uuid
        from l_returning_content
        where return_no = #{returnNo}
    </select>

    <update id="dropClaimPackage">
        delete
        from l_return_package
        where returnNo = #{returnNo};
    </update>

    <insert id="insertClaimPackage">
        insert into l_return_package(uuid, returnNo, length, width, height, carrier, trackNo, weight)
        values
        <foreach collection="list" separator="," item="item">
            (#{item.uuid},#{item.returnNo},#{item.length},#{item.width},#{item.height},#{item.carrier},#{item.trackNo},#{item.weight})
        </foreach>
    </insert>

    <update id="updateStatus">
        update l_returning
        set status=#{status}
        where return_no = #{returnNo}
    </update>

    <update id="dropClaimContentDealing">
        delete
        from l_retun_dealing_content
        where return_no = #{returnNo};
    </update>

    <insert id="insertClaimContentDealing">
        insert into l_retun_dealing_content(uuid, return_no, sku, name, deal_with, shelf_no, comment)
        values
        <foreach collection="list" separator="," item="item">
            (#{item.uuid},#{item.returnNo},#{item.sku},#{item.name},#{item.dealWith},#{item.shelfNo},#{item.comment})
        </foreach>
    </insert>

</mapper>
